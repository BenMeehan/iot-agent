// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileOperations is an autogenerated mock type for the FileOperations type
type FileOperations struct {
	mock.Mock
}

// ReadFile provides a mock function with given fields: filePath
func (_m *FileOperations) ReadFile(filePath string) (string, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadFileRaw provides a mock function with given fields: filePath
func (_m *FileOperations) ReadFileRaw(filePath string) ([]byte, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ReadFileRaw")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadJsonFile provides a mock function with given fields: filePath, v
func (_m *FileOperations) ReadJsonFile(filePath string, v interface{}) error {
	ret := _m.Called(filePath, v)

	if len(ret) == 0 {
		panic("no return value specified for ReadJsonFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(filePath, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadYamlFile provides a mock function with given fields: filePath, v
func (_m *FileOperations) ReadYamlFile(filePath string, v interface{}) error {
	ret := _m.Called(filePath, v)

	if len(ret) == 0 {
		panic("no return value specified for ReadYamlFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(filePath, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteFile provides a mock function with given fields: filePath, data
func (_m *FileOperations) WriteFile(filePath string, data string) error {
	ret := _m.Called(filePath, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filePath, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteFileRaw provides a mock function with given fields: filePath, data
func (_m *FileOperations) WriteFileRaw(filePath string, data []byte) error {
	ret := _m.Called(filePath, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFileRaw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(filePath, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteJsonFile provides a mock function with given fields: filePath, data
func (_m *FileOperations) WriteJsonFile(filePath string, data interface{}) error {
	ret := _m.Called(filePath, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteJsonFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(filePath, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteYamlFile provides a mock function with given fields: filePath, data
func (_m *FileOperations) WriteYamlFile(filePath string, data interface{}) error {
	ret := _m.Called(filePath, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteYamlFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(filePath, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFileOperations creates a new instance of FileOperations. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileOperations(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileOperations {
	mock := &FileOperations{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
