// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	identity "github.com/benmeehan/iot-agent/pkg/identity"
	mock "github.com/stretchr/testify/mock"
)

// DeviceInfoInterface is an autogenerated mock type for the DeviceInfoInterface type
type DeviceInfoInterface struct {
	mock.Mock
}

// GetDeviceID provides a mock function with no fields
func (_m *DeviceInfoInterface) GetDeviceID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDeviceIdentity provides a mock function with no fields
func (_m *DeviceInfoInterface) GetDeviceIdentity() *identity.Identity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceIdentity")
	}

	var r0 *identity.Identity
	if rf, ok := ret.Get(0).(func() *identity.Identity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	return r0
}

// LoadDeviceInfo provides a mock function with no fields
func (_m *DeviceInfoInterface) LoadDeviceInfo() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadDeviceInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDeviceID provides a mock function with given fields: deviceID
func (_m *DeviceInfoInterface) SaveDeviceID(deviceID string) error {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for SaveDeviceID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(deviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDeviceInfoInterface creates a new instance of DeviceInfoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeviceInfoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeviceInfoInterface {
	mock := &DeviceInfoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
