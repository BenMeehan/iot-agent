// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mqtt "github.com/benmeehan/iot-agent/internal/middlewares/mqtt"
	paho_mqtt_golang "github.com/eclipse/paho.mqtt.golang"
	mock "github.com/stretchr/testify/mock"
)

// MQTTMiddleware is an autogenerated mock type for the MQTTMiddleware type
type MQTTMiddleware struct {
	mock.Mock
}

// Init provides a mock function with given fields: params
func (_m *MQTTMiddleware) Init(params interface{}) error {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: topic, qos, retained, payload
func (_m *MQTTMiddleware) Publish(topic string, qos byte, retained bool, payload interface{}) error {
	ret := _m.Called(topic, qos, retained, payload)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, byte, bool, interface{}) error); ok {
		r0 = rf(topic, qos, retained, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetNext provides a mock function with given fields: next
func (_m *MQTTMiddleware) SetNext(next mqtt.MQTTMiddleware) {
	_m.Called(next)
}

// Subscribe provides a mock function with given fields: topic, qos, callback
func (_m *MQTTMiddleware) Subscribe(topic string, qos byte, callback paho_mqtt_golang.MessageHandler) error {
	ret := _m.Called(topic, qos, callback)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, byte, paho_mqtt_golang.MessageHandler) error); ok {
		r0 = rf(topic, qos, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: topics
func (_m *MQTTMiddleware) Unsubscribe(topics ...string) error {
	_va := make([]interface{}, len(topics))
	for _i := range topics {
		_va[_i] = topics[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(topics...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMQTTMiddleware creates a new instance of MQTTMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMQTTMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MQTTMiddleware {
	mock := &MQTTMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
