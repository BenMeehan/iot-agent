// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JWTManagerInterface is an autogenerated mock type for the JWTManagerInterface type
type JWTManagerInterface struct {
	mock.Mock
}

// CheckExpiration provides a mock function with given fields: token, tokenType
func (_m *JWTManagerInterface) CheckExpiration(token string, tokenType string) (bool, error) {
	ret := _m.Called(token, tokenType)

	if len(ret) == 0 {
		panic("no return value specified for CheckExpiration")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(token, tokenType)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(token, tokenType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(token, tokenType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJWT provides a mock function with no fields
func (_m *JWTManagerInterface) GetJWT() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJWT")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRefreshToken provides a mock function with no fields
func (_m *JWTManagerInterface) GetRefreshToken() (string, int) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 string
	var r1 int
	if rf, ok := ret.Get(0).(func() (string, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// IsJWTValid provides a mock function with no fields
func (_m *JWTManagerInterface) IsJWTValid() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsJWTValid")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadTokens provides a mock function with no fields
func (_m *JWTManagerInterface) LoadTokens() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LoadTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTokens provides a mock function with given fields: accessToken, refreshToken, expiresIn
func (_m *JWTManagerInterface) SaveTokens(accessToken string, refreshToken string, expiresIn int) error {
	ret := _m.Called(accessToken, refreshToken, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for SaveTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(accessToken, refreshToken, expiresIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifySignature provides a mock function with given fields: secret, token
func (_m *JWTManagerInterface) VerifySignature(secret []byte, token string) (bool, error) {
	ret := _m.Called(secret, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifySignature")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, string) (bool, error)); ok {
		return rf(secret, token)
	}
	if rf, ok := ret.Get(0).(func([]byte, string) bool); ok {
		r0 = rf(secret, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func([]byte, string) error); ok {
		r1 = rf(secret, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTManagerInterface creates a new instance of JWTManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTManagerInterface {
	mock := &JWTManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
